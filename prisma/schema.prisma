// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum ProviderType {
  oauth
  email
  credentials
}

enum UserRole {
  user
  admin
  superadmin
}

enum Months {
  january
  february
  march
  april
  may
  june
  july
  august
  september
  october
  november
  december
}

// Necessary for Next auth
model Account {
  id                String       @id @default(uuid())
  userId            String
  type              ProviderType
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  password String?

  // :P
  role UserRole? @default(admin)

  createdAt DateTime @default(now())

  profile       UserProfile?
  AffiliateStat AffiliateStat?
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
}

model Country {
  name String @id

  stats       CountryStats?
  UserProfile UserProfile[]
}

model CountryStats {
  countryName String  @id
  Country     Country @relation(fields: [countryName], references: [name])

  users Int
}

model UserProfile {
  userId String @id
  User   User   @relation(fields: [userId], references: [id])

  city  String
  state String?

  country String
  Country Country @relation(fields: [country], references: [name])

  occupation  String
  phoneNumber String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AffiliateStat {
  id String @id @default(uuid())

  userId String @unique
  User   User   @relation(fields: [userId], references: [id])

  affiliateSalesCount Int @default(0)

  createdAt      DateTime      @default(now())
  affiliateSales Transaction[]
}

model Transaction {
  id String @id @default(uuid())

  userId          String
  User            User           @relation(fields: [userId], references: [id])
  AffiliateStat   AffiliateStat? @relation(fields: [affiliateStatId], references: [id])
  affiliateStatId String?

  cost Float

  productsCount Int @default(0)

  createdAt DateTime @default(now())

  products Product[]
}

model Category {
  name  String @id
  count Int    @default(0)

  products        Product[]
  SalesByCategory SalesByCategory[]
}

model Product {
  id String @id @default(uuid())

  name        String
  price       Float
  description String
  rating      Float
  supply      Int

  category String
  Category Category? @relation(fields: [category], references: [name])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  transactions Transaction[]
  stats        ProductStat[]
}

// 
model ProductStat {
  id   String @id @default(uuid())
  year Int

  productId String
  Product   Product @relation(fields: [productId], references: [id])

  yearlySalesTotal     Float
  yearlyTotalSoldUnits Int

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  monthlyData ProductStatMonthly[]
  dailyData   ProductStatDaily[]

  @@unique([productId, year])
}

model ProductStatMonthly {
  id String @id @default(uuid())

  ProductStat   ProductStat @relation(fields: [productStatId], references: [id])
  productStatId String

  month      Months
  totalSales Float
  totalUnits Int

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([productStatId, month])
}

model ProductStatDaily {
  id String @id @default(uuid())

  ProductStat   ProductStat @relation(fields: [productStatId], references: [id])
  productStatId String

  date       DateTime
  day        Int
  totalSales Float
  totalUnits Int

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([productStatId, day])
}

//
model OverallStats {
  id   String @id @default(uuid())
  year Int

  totalCustomers Int

  yearlySalesTotal     Float
  yearlyTotalSoldUnits Int

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  monthlyData     OverallStatsMonthly[]
  dailyData       OverallStatsDaily[]
  SalesByCategory SalesByCategory[]
}

model OverallStatsMonthly {
  id String @id @default(uuid())

  OverallStats   OverallStats @relation(fields: [overallStatsId], references: [id])
  overallStatsId String

  month      Months
  totalSales Float
  totalUnits Int

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model OverallStatsDaily {
  id String @id @default(uuid())

  OverallStats   OverallStats @relation(fields: [overallStatsId], references: [id])
  overallStatsId String

  date       DateTime
  day        Int
  totalSales Float
  totalUnits Int

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model SalesByCategory {
  OverallStats   OverallStats @relation(fields: [overallStatsId], references: [id])
  overallStatsId String

  category String
  Category Category @relation(fields: [category], references: [name])

  count Int @default(0)

  @@id([overallStatsId, category])
}
